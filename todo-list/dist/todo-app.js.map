{"version":3,"file":"todo-app.js","sources":["../node_modules/lit-html/lib/directive.js","../node_modules/lit-html/lib/dom.js","../node_modules/lit-html/lib/part.js","../node_modules/lit-html/lib/template.js","../node_modules/lit-html/lib/template-instance.js","../node_modules/lit-html/lib/template-result.js","../node_modules/lit-html/lib/parts.js","../node_modules/lit-html/lib/default-template-processor.js","../node_modules/lit-html/lib/template-factory.js","../node_modules/lit-html/lib/render.js","../node_modules/lit-html/lit-html.js","../node_modules/lit-html/lib/modify-template.js","../node_modules/lit-html/lib/shady-render.js","../node_modules/lit-element/lib/updating-element.js","../node_modules/lit-element/lib/css-tag.js","../node_modules/lit-element/lit-element.js","../src/components/eit-switch.js","../src/components/todo-item.js","../src/components/todo-list.js","../node_modules/dile-input/dile-input.js","../src/components/todo-add.js","../src/todo-app.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive so that lit-html will call the function\n * during template rendering, rather than passing as a value.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object\n *\n * @example\n *\n * ```\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n * ```\n */\n// tslint:disable-next-line:no-any\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), into another container (could be the same container), before\n * `beforeNode`. If `beforeNode` is null, it appends the nodes to the\n * container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    let node = start;\n    while (node !== end) {\n        const n = node.nextSibling;\n        container.insertBefore(node, before);\n        node = n;\n    }\n};\n/**\n * Removes nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), from `container`.\n */\nexport const removeNodes = (container, startNode, endNode = null) => {\n    let node = startNode;\n    while (node !== endNode) {\n        const n = node.nextSibling;\n        container.removeChild(node);\n        node = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        let index = -1;\n        let partIndex = 0;\n        const nodesToRemove = [];\n        const _prepareTemplate = (template) => {\n            const content = template.content;\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n            // Keeps track of the last index associated with a part. We try to delete\n            // unnecessary nodes, but we never want to associate two different parts\n            // to the same index. They must have a constant node between.\n            let lastPartIndex = 0;\n            while (walker.nextNode()) {\n                index++;\n                const node = walker.currentNode;\n                if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                    if (node.hasAttributes()) {\n                        const attributes = node.attributes;\n                        // Per\n                        // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                        // attributes are not guaranteed to be returned in document order.\n                        // In particular, Edge/IE can return them out of order, so we cannot\n                        // assume a correspondance between part index and attribute index.\n                        let count = 0;\n                        for (let i = 0; i < attributes.length; i++) {\n                            if (attributes[i].value.indexOf(marker) >= 0) {\n                                count++;\n                            }\n                        }\n                        while (count-- > 0) {\n                            // Get the template literal section leading up to the first\n                            // expression in this attribute\n                            const stringForPart = result.strings[partIndex];\n                            // Find the attribute name\n                            const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                            // Find the corresponding attribute\n                            // All bound attributes have had a suffix added in\n                            // TemplateResult#getHTML to opt out of special attribute\n                            // handling. To look up the attribute value we also need to add\n                            // the suffix.\n                            const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                            const attributeValue = node.getAttribute(attributeLookupName);\n                            const strings = attributeValue.split(markerRegex);\n                            this.parts.push({ type: 'attribute', index, name, strings });\n                            node.removeAttribute(attributeLookupName);\n                            partIndex += strings.length - 1;\n                        }\n                    }\n                    if (node.tagName === 'TEMPLATE') {\n                        _prepareTemplate(node);\n                    }\n                }\n                else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                    const data = node.data;\n                    if (data.indexOf(marker) >= 0) {\n                        const parent = node.parentNode;\n                        const strings = data.split(markerRegex);\n                        const lastIndex = strings.length - 1;\n                        // Generate a new text node for each literal section\n                        // These nodes are also used as the markers for node parts\n                        for (let i = 0; i < lastIndex; i++) {\n                            parent.insertBefore((strings[i] === '') ? createMarker() :\n                                document.createTextNode(strings[i]), node);\n                            this.parts.push({ type: 'node', index: ++index });\n                        }\n                        // If there's no text, we must insert a comment to mark our place.\n                        // Else, we can trust it will stick around after cloning.\n                        if (strings[lastIndex] === '') {\n                            parent.insertBefore(createMarker(), node);\n                            nodesToRemove.push(node);\n                        }\n                        else {\n                            node.data = strings[lastIndex];\n                        }\n                        // We have a part for each match found\n                        partIndex += lastIndex;\n                    }\n                }\n                else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                    if (node.data === marker) {\n                        const parent = node.parentNode;\n                        // Add a new marker node to be the startNode of the Part if any of\n                        // the following are true:\n                        //  * We don't have a previousSibling\n                        //  * The previousSibling is already the start of a previous part\n                        if (node.previousSibling === null || index === lastPartIndex) {\n                            index++;\n                            parent.insertBefore(createMarker(), node);\n                        }\n                        lastPartIndex = index;\n                        this.parts.push({ type: 'node', index });\n                        // If we don't have a nextSibling, keep this node so we have an end.\n                        // Else, we can remove it to save future costs.\n                        if (node.nextSibling === null) {\n                            node.data = '';\n                        }\n                        else {\n                            nodesToRemove.push(node);\n                            index--;\n                        }\n                        partIndex++;\n                    }\n                    else {\n                        let i = -1;\n                        while ((i = node.data.indexOf(marker, i + 1)) !==\n                            -1) {\n                            // Comment node has a binding marker inside, make an inactive part\n                            // The binding won't work, but subsequent bindings will\n                            // TODO (justinfagnani): consider whether it's even worth it to\n                            // make bindings in comments work\n                            this.parts.push({ type: 'node', index: -1 });\n                        }\n                    }\n                }\n            }\n        };\n        _prepareTemplate(element);\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#attributes-0\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-character\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this._parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this._parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this._parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // When using the Custom Elements polyfill, clone the node, rather than\n        // importing it, to keep the fragment in the template's document. This\n        // leaves the fragment inert so custom elements won't upgrade and\n        // potentially modify their contents by creating a polyfilled ShadowRoot\n        // while we traverse the tree.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const parts = this.template.parts;\n        let partIndex = 0;\n        let nodeIndex = 0;\n        const _prepareInstance = (fragment) => {\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n            let node = walker.nextNode();\n            // Loop through all the nodes and parts of a template\n            while (partIndex < parts.length && node !== null) {\n                const part = parts[partIndex];\n                // Consecutive Parts may have the same node index, in the case of\n                // multiple bound attributes on an element. So each iteration we either\n                // increment the nodeIndex, if we aren't on a node with a part, or the\n                // partIndex if we are. By not incrementing the nodeIndex when we find a\n                // part, we allow for the next part to be associated with the current\n                // node if neccessasry.\n                if (!isTemplatePartActive(part)) {\n                    this._parts.push(undefined);\n                    partIndex++;\n                }\n                else if (nodeIndex === part.index) {\n                    if (part.type === 'node') {\n                        const part = this.processor.handleTextExpression(this.options);\n                        part.insertAfterNode(node.previousSibling);\n                        this._parts.push(part);\n                    }\n                    else {\n                        this._parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n                    }\n                    partIndex++;\n                }\n                else {\n                    nodeIndex++;\n                    if (node.nodeName === 'TEMPLATE') {\n                        _prepareInstance(node.content);\n                    }\n                    node = walker.nextNode();\n                }\n            }\n        };\n        _prepareInstance(fragment);\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const endIndex = this.strings.length - 1;\n        let html = '';\n        for (let i = 0; i < endIndex; i++) {\n            const s = this.strings[i];\n            // This exec() call does two things:\n            // 1) Appends a suffix to the bound attribute name to opt out of special\n            // attribute value parsing that IE11 and Edge do, like for style and\n            // many SVG attributes. The Template class also appends the same suffix\n            // when looking up attributes to create Parts.\n            // 2) Adds an unquoted-attribute-safe marker for the first expression in\n            // an attribute. Subsequent attribute expressions will use node markers,\n            // and this is safe since attributes with multiple expressions are\n            // guaranteed to be quoted.\n            const match = lastAttributeNameRegex.exec(s);\n            if (match) {\n                // We're starting a new bound attribute.\n                // Add the safe attribute suffix, and use unquoted-attribute-safe\n                // marker.\n                html += s.substr(0, match.index) + match[1] + match[2] +\n                    boundAttributeSuffix + match[3] + marker;\n            }\n            else {\n                // We're either in a bound node, or trailing bound attribute.\n                // Either way, nodeMarker is safe to use.\n                html += s + nodeMarker;\n            }\n        }\n        return html + this.strings[endIndex];\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTMl in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\n/**\n * Sets attribute values for AttributeParts, so that the value is only set once\n * even if there are multiple parts for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (v != null &&\n                    (Array.isArray(v) ||\n                        // tslint:disable-next-line:no-any\n                        typeof v !== 'string' && v[Symbol.iterator])) {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n                else {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\nexport class AttributePart {\n    constructor(comitter) {\n        this.value = undefined;\n        this.committer = comitter;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Inserts this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part between `ref` and `ref`'s next sibling. Both `ref` and\n     * its next sibling must be static, unchanging nodes such as those that appear\n     * in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part._insert(this.startNode = createMarker());\n        part._insert(this.endNode = createMarker());\n    }\n    /**\n     * Appends this part after `ref`\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref._insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        const value = this._pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this._commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this._commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this._commitNode(value);\n        }\n        else if (Array.isArray(value) ||\n            // tslint:disable-next-line:no-any\n            value[Symbol.iterator]) {\n            this._commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this._commitText(value);\n        }\n    }\n    _insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    _commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this._insert(value);\n        this.value = value;\n    }\n    _commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = value;\n        }\n        else {\n            this._commitNode(document.createTextNode(typeof value === 'string' ? value : String(value)));\n        }\n        this.value = value;\n    }\n    _commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this._commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    _commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        if (this._pendingValue === noChange) {\n            return;\n        }\n        const value = !!this._pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n        }\n        this.value = value;\n        this._pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // tslint:disable-next-line:no-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line:no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line:no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this._boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        if (this._pendingValue === noChange) {\n            return;\n        }\n        const newListener = this._pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this._boundHandleEvent, this._options);\n        }\n        if (shouldAddListener) {\n            this._options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this._boundHandleEvent, this._options);\n        }\n        this.value = newListener;\n        this._pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const comitter = new PropertyCommitter(element, name.slice(1), strings);\n            return comitter.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const comitter = new AttributeCommitter(element, name, strings);\n        return comitter.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.0.0');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module shady-render\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @module shady-render\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { marker, Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected.` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    const key = result.strings.join(marker);\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n    }\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.keyString.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (renderedDOM, template, scopeName) => {\n    shadyRenderSet.add(scopeName);\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    // If there are no styles, skip unnecessary work\n    if (styles.length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < styles.length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    insertNodeIntoTemplate(template, condensedStyle, template.element.content.firstChild);\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);\n    if (window.ShadyCSS.nativeShadow) {\n        // When in native Shadow DOM, re-add styling to rendered content using\n        // the style ShadyCSS produced.\n        const style = template.element.content.querySelector('style');\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else {\n        // When not in native Shadow DOM, at this point ShadyCSS will have\n        // removed the style from the lit template and parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        template.element.content.insertBefore(condensedStyle, template.element.content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render = (result, container, options) => {\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    const needsScoping = container instanceof ShadowRoot &&\n        compatibleShadyCSSVersion && result instanceof TemplateResult;\n    // Handle first render to a scope specially...\n    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n    // On first scope render, render into a fragment; this cannot be a single\n    // fragment that is reused since nested renders can occur synchronously.\n    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n    litRender(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When performing first scope render,\n    // (1) We've rendered into a fragment so that there's a chance to\n    // `prepareTemplateStyles` before sub-elements hit the DOM\n    // (which might cause them to render based on a common pattern of\n    // rendering in a custom element's `connectedCallback`);\n    // (2) Scope the template with ShadyCSS one time only for this scope.\n    // (3) Render the fragment into the container and make sure the\n    // container knows its `part` is the one we just rendered. This ensures\n    // DOM will be re-used on subsequent renders.\n    if (firstScopeRender) {\n        const part = parts.get(renderContainer);\n        parts.delete(renderContainer);\n        if (part.value instanceof TemplateInstance) {\n            prepareTemplateStyles(renderContainer, part.value.template, scopeName);\n        }\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n    }\n    // After elements have hit the DOM, update styling if this is the\n    // initial render to this container.\n    // This is needed whenever dynamic changes are made so it would be\n    // safest to do every render; however, this would regress performance\n    // so we leave it up to the user to call `ShadyCSSS.styleElement`\n    // for dynamic changes.\n    if (!hasRendered && needsScoping) {\n        window.ShadyCSS.styleElement(container.host);\n    }\n};\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    (prop, _obj) => prop;\nexport const defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value ? '' : null;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                return value == null ? value : JSON.stringify(value);\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value !== null;\n            case Number:\n                return value === null ? null : Number(value);\n            case Object:\n            case Array:\n                return JSON.parse(value);\n        }\n        return value;\n    }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst microtaskPromise = Promise.resolve(true);\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\nconst STATE_HAS_CONNECTED = 1 << 5;\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        this._updatePromise = microtaskPromise;\n        this._hasConnectedResolver = undefined;\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this._classProperties.forEach((v, p) => {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Ensures the private `_classProperties` property metadata is created.\n     * In addition to `finalize` this is also called in `createProperty` to\n     * ensure the `@property` decorator can add property metadata.\n     */\n    /** @nocollapse */\n    static _ensureClassProperties() {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     * @nocollapse\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure storage exists for property\n        // metadata.\n        this._ensureClassProperties();\n        this._classProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user's intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        Object.defineProperty(this.prototype, name, {\n            // tslint:disable-next-line:no-any no symbol in index\n            get() {\n                return this[key];\n            },\n            set(value) {\n                // tslint:disable-next-line:no-any no symbol in index\n                const oldValue = this[name];\n                // tslint:disable-next-line:no-any no symbol in index\n                this[key] = value;\n                this._requestUpdate(name, oldValue);\n            },\n            configurable: true,\n            enumerable: true\n        });\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        if (this.hasOwnProperty(JSCompiler_renameProperty('finalized', this)) &&\n            this.finalized) {\n            return;\n        }\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (typeof superCtor.finalize === 'function') {\n            superCtor.finalize();\n        }\n        this.finalized = true;\n        this._ensureClassProperties();\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process \"own\" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...(typeof Object.getOwnPropertySymbols === 'function') ?\n                    Object.getOwnPropertySymbols(props) :\n                    []\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeSript lack of support for symbol in\n                // index types\n                // tslint:disable-next-line:no-any no symbol in index\n                this.createProperty(p, props[p]);\n            }\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false ?\n            undefined :\n            (typeof attribute === 'string' ?\n                attribute :\n                (typeof name === 'string' ? name.toLowerCase() : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     * @nocollapse\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's\n     * `converter` or `converter.fromAttribute` property option.\n     * @nocollapse\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options.type;\n        const converter = options.converter || defaultConverter;\n        const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);\n        return fromAttribute ? fromAttribute(value, type) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     * @nocollapse\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options.reflect === undefined) {\n            return;\n        }\n        const type = options.type;\n        const converter = options.converter;\n        const toAttribute = converter && converter.toAttribute ||\n            defaultConverter.toAttribute;\n        return toAttribute(value, type);\n    }\n    /**\n     * Performs element initialization. By default captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this._saveInstanceProperties();\n        // ensures first update will be caught by an early access of `updateComplete`\n        this._requestUpdate();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor\n            ._classProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        });\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        // tslint:disable-next-line:no-any\n        this._instanceProperties.forEach((v, p) => this[p] = v);\n        this._instanceProperties = undefined;\n    }\n    connectedCallback() {\n        this._updateState = this._updateState | STATE_HAS_CONNECTED;\n        // Ensure first connection completes an update. Updates cannot complete before\n        // connection and if one is pending connection the `_hasConnectionResolver`\n        // will exist. If so, resolve it to complete the update, otherwise\n        // requestUpdate.\n        if (this._hasConnectedResolver) {\n            this._hasConnectedResolver();\n            this._hasConnectedResolver = undefined;\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() {\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attr = ctor._attributeNameForProperty(name, options);\n        if (attr !== undefined) {\n            const attrValue = ctor._propertyValueToAttribute(value, options);\n            // an undefined value does not change the attribute.\n            if (attrValue === undefined) {\n                return;\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we'd like to discover).\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n            return;\n        }\n        const ctor = this.constructor;\n        const propName = ctor._attributeToPropertyMap.get(name);\n        if (propName !== undefined) {\n            const options = ctor._classProperties.get(propName) || defaultPropertyDeclaration;\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n            this[propName] =\n                // tslint:disable-next-line:no-any\n                ctor._propertyValueFromAttribute(value, options);\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n        }\n    }\n    /**\n     * This private version of `requestUpdate` does not access or return the\n     * `updateComplete` promise. This promise can be overridden and is therefore\n     * not free to access.\n     */\n    _requestUpdate(name, oldValue) {\n        let shouldRequestUpdate = true;\n        // If we have a property key, perform property update steps.\n        if (name !== undefined) {\n            const ctor = this.constructor;\n            const options = ctor._classProperties.get(name) || defaultPropertyDeclaration;\n            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n                if (!this._changedProperties.has(name)) {\n                    this._changedProperties.set(name, oldValue);\n                }\n                // Add to reflecting properties set.\n                // Note, it's important that every change has a chance to add the\n                // property to `_reflectingProperties`. This ensures setting\n                // attribute + property reflects correctly.\n                if (options.reflect === true &&\n                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n                    if (this._reflectingProperties === undefined) {\n                        this._reflectingProperties = new Map();\n                    }\n                    this._reflectingProperties.set(name, options);\n                }\n            }\n            else {\n                // Abort the request if the property should not be considered changed.\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n            this._enqueueUpdate();\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        this._requestUpdate(name, oldValue);\n        return this.updateComplete;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async _enqueueUpdate() {\n        // Mark state updating...\n        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n        let resolve;\n        let reject;\n        const previousUpdatePromise = this._updatePromise;\n        this._updatePromise = new Promise((res, rej) => {\n            resolve = res;\n            reject = rej;\n        });\n        try {\n            // Ensure any previous update has resolved before updating.\n            // This `await` also ensures that property changes are batched.\n            await previousUpdatePromise;\n        }\n        catch (e) {\n            // Ignore any previous errors. We only care that the previous cycle is\n            // done. Any error should have been handled in the previous update.\n        }\n        // Make sure the element has connected before updating.\n        if (!this._hasConnected) {\n            await new Promise((res) => this._hasConnectedResolver = res);\n        }\n        try {\n            const result = this.performUpdate();\n            // If `performUpdate` returns a Promise, we await it. This is done to\n            // enable coordinating updates with a scheduler. Note, the result is\n            // checked to avoid delaying an additional microtask unless we need to.\n            if (result != null) {\n                await result;\n            }\n        }\n        catch (e) {\n            reject(e);\n        }\n        resolve(!this._hasRequestedUpdate);\n    }\n    get _hasConnected() {\n        return (this._updateState & STATE_HAS_CONNECTED);\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    get hasUpdated() {\n        return (this._updateState & STATE_HAS_UPDATED);\n    }\n    /**\n     * Performs an element update. Note, if an exception is thrown during the\n     * update, `firstUpdated` and `updated` will not be called.\n     *\n     * You can override this method to change the timing of updates. If this\n     * method is overridden, `super.performUpdate()` must be called.\n     *\n     * For instance, to schedule updates to occur just before the next frame:\n     *\n     * ```\n     * protected async performUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.performUpdate();\n     * }\n     * ```\n     */\n    performUpdate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        let shouldUpdate = false;\n        const changedProperties = this._changedProperties;\n        try {\n            shouldUpdate = this.shouldUpdate(changedProperties);\n            if (shouldUpdate) {\n                this.update(changedProperties);\n            }\n        }\n        catch (e) {\n            // Prevent `firstUpdated` and `updated` from running when there's an\n            // update exception.\n            shouldUpdate = false;\n            throw e;\n        }\n        finally {\n            // Ensure element can accept additional updates after an exception.\n            this._markUpdated();\n        }\n        if (shouldUpdate) {\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. If the Promise is rejected, an\n     * exception was thrown during the update. This getter can be implemented to\n     * await additional state. For example, it is sometimes useful to await a\n     * rendered element before fulfilling this Promise. To do this, first await\n     * `super.updateComplete` then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() {\n        return this._updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));\n            this._reflectingProperties = undefined;\n        }\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) {\n    }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) {\n    }\n}\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement.finalized = true;\n//# sourceMappingURL=updating-element.js.map","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nexport const supportsAdoptingStyleSheets = ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\nconst constructionToken = Symbol();\nexport class CSSResult {\n    constructor(cssText, safeToken) {\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it's lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        if (this._styleSheet === undefined) {\n            // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n            // is constructable.\n            if (supportsAdoptingStyleSheets) {\n                this._styleSheet = new CSSStyleSheet();\n                this._styleSheet.replaceSync(this.cssText);\n            }\n            else {\n                this._styleSheet = null;\n            }\n        }\n        return this._styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value) => {\n    return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = (value) => {\n    if (value instanceof CSSResult) {\n        return value.cssText;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n    }\n};\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css = (strings, ...values) => {\n    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n//# sourceMappingURL=css-tag.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { TemplateResult } from 'lit-html';\nimport { render } from 'lit-html/lib/shady-render.js';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg, TemplateResult, SVGTemplateResult } from 'lit-html/lit-html.js';\nimport { supportsAdoptingStyleSheets } from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.0.1');\n/**\n * Minimal implementation of Array.prototype.flat\n * @param arr the array to flatten\n * @param result the accumlated result\n */\nfunction arrayFlat(styles, result = []) {\n    for (let i = 0, length = styles.length; i < length; i++) {\n        const value = styles[i];\n        if (Array.isArray(value)) {\n            arrayFlat(value, result);\n        }\n        else {\n            result.push(value);\n        }\n    }\n    return result;\n}\n/** Deeply flattens styles array. Uses native flat if available. */\nconst flattenStyles = (styles) => styles.flat ? styles.flat(Infinity) : arrayFlat(styles);\nexport class LitElement extends UpdatingElement {\n    /** @nocollapse */\n    static finalize() {\n        super.finalize();\n        // Prepare styling that is stamped at first render time. Styling\n        // is built from user provided `styles` or is inherited from the superclass.\n        this._styles =\n            this.hasOwnProperty(JSCompiler_renameProperty('styles', this)) ?\n                this._getUniqueStyles() :\n                this._styles || [];\n    }\n    /** @nocollapse */\n    static _getUniqueStyles() {\n        // Take care not to call `this.styles` multiple times since this generates\n        // new CSSResults each time.\n        // TODO(sorvell): Since we do not cache CSSResults by input, any\n        // shared styles will generate new stylesheet objects, which is wasteful.\n        // This should be addressed when a browser ships constructable\n        // stylesheets.\n        const userStyles = this.styles;\n        const styles = [];\n        if (Array.isArray(userStyles)) {\n            const flatStyles = flattenStyles(userStyles);\n            // As a performance optimization to avoid duplicated styling that can\n            // occur especially when composing via subclassing, de-duplicate styles\n            // preserving the last item in the list. The last item is kept to\n            // try to preserve cascade order with the assumption that it's most\n            // important that last added styles override previous styles.\n            const styleSet = flatStyles.reduceRight((set, s) => {\n                set.add(s);\n                // on IE set.add does not return the set.\n                return set;\n            }, new Set());\n            // Array.from does not work on Set in IE\n            styleSet.forEach((v) => styles.unshift(v));\n        }\n        else if (userStyles) {\n            styles.push(userStyles);\n        }\n        return styles;\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot`\n     * to create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        super.initialize();\n        this.renderRoot =\n            this.createRenderRoot();\n        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n        // element's getRootNode(). While this could be done, we're choosing not to\n        // support this now since it would require different logic around de-duping.\n        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n            this.adoptStyles();\n        }\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Applies styling to the element shadowRoot using the `static get styles`\n     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n     * available and will fallback otherwise. When Shadow DOM is polyfilled,\n     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n     * is available but `adoptedStyleSheets` is not, styles are appended to the\n     * end of the `shadowRoot` to [mimic spec\n     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n     */\n    adoptStyles() {\n        const styles = this.constructor._styles;\n        if (styles.length === 0) {\n            return;\n        }\n        // There are three separate cases here based on Shadow DOM support.\n        // (1) shadowRoot polyfilled: use ShadyCSS\n        // (2) shadowRoot.adoptedStyleSheets available: use it.\n        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n        // rendering\n        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);\n        }\n        else if (supportsAdoptingStyleSheets) {\n            this.renderRoot.adoptedStyleSheets =\n                styles.map((s) => s.styleSheet);\n        }\n        else {\n            // This must be done after rendering so the actual style insertion is done\n            // in `update`.\n            this._needsShimAdoptedStyleSheets = true;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note, first update/render handles styleElement so we only call this if\n        // connected after first update.\n        if (this.hasUpdated && window.ShadyCSS !== undefined) {\n            window.ShadyCSS.styleElement(this);\n        }\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        super.update(changedProperties);\n        const templateResult = this.render();\n        if (templateResult instanceof TemplateResult) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n        // When native Shadow DOM is used but adoptedStyles are not supported,\n        // insert styling after rendering to ensure adoptedStyles have highest\n        // priority.\n        if (this._needsShimAdoptedStyleSheets) {\n            this._needsShimAdoptedStyleSheets = false;\n            this.constructor._styles.forEach((s) => {\n                const style = document.createElement('style');\n                style.textContent = s.cssText;\n                this.renderRoot.appendChild(style);\n            });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method must return\n     * a lit-html TemplateResult. Setting properties inside this method will *not*\n     * trigger the element to update.\n     */\n    render() {\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n */\nLitElement.finalized = true;\n/**\n * Render method used to render the lit-html TemplateResult to the element's\n * DOM.\n * @param {TemplateResult} Template to render.\n * @param {Element|DocumentFragment} Node into which to render.\n * @param {String} Element name.\n * @nocollapse\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map","import { LitElement, html, css } from 'lit-element';\n\nclass EitSwitch extends LitElement {\n  static get properties() {\n    return {\n      checked: { type: Boolean },\n    };\n  }\n\n  constructor() {\n    super(); \n    this.checked = false;\n    // this.addEventListener('click', () => {\n    //   console.log('evento!!');\n    //   this.checked = !this.checked;\n    // });\n  }\n\n  static get styles() {\n    return css`\n    :host {\n      display: inline-block;\n    }\n    span {\n      display: flex;\n      background-color: var(--eit-switch-background-color, #95D5D5);\n      border-radius: 4px;\n      width: 20px;\n      height: 20px;\n      line-height: 0;\n      align-items: center;\n      justify-content: center;\n    }\n    .checked {\n      background-color: #4ae;\n      color: #fff;\n    }\n    path[fill=\"none\"], .checked path[fill=\"none\"] {\n      fill: transparent;\n    }\n    path {\n      fill: #fff;\n    }\n    .checked path {\n      fill: #fff;\n    }\n    `;\n  }\n\n  render() {\n    return html`\n      <span @click=\"${this.doClick}\">\n        ${this.checked\n          ? this.checkedIcon\n          : this.unCheckedIcon\n        }\n      </span>\n    `;\n  }\n\n  doClick() {\n    this.checked = !this.checked;\n    this.dispatchEvent(new CustomEvent('eit-switch-checked', {\n      bubbles: true,\n      composed: true,\n      detail: this.checked\n    }));\n  }\n\n\n  get checkedIcon() {\n    return html`<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"/></svg>`;\n  }\n  get unCheckedIcon() {\n    return html`<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\"><path d=\"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>`;\n  }\n}\ncustomElements.define('eit-switch', EitSwitch);\n","import { LitElement, html, css } from 'lit-element';\nimport './eit-switch';\n\nclass TodoItem extends LitElement {\n  static get properties() {\n    return {\n      task: { type: Object }\n    };\n  }\n\n  static get styles() {\n    return css`\n    p {\n      display: flex;\n      align-items: center;\n    }\n    eit-switch {\n      margin-right: 10px;\n    }\n    .completed {\n      text-decoration: line-through;\n      color: #888;\n    }\n    `;\n  }\n\n  render() {\n    return html`\n    <p class=\"${this.task.completed ? 'completed' : ''}\">\n      <eit-switch ?checked=\"${this.task.completed}\" @eit-switch-checked=\"${this.checkedChanged}\"></eit-switch>  ${ this.task.name }\n    </p>\n    `;\n  }\n\n  checkedChanged(e) {\n    this.dispatchEvent(new CustomEvent('task-changed', {\n      bubbles: true,\n      composed: true,\n      detail: {\n        state: e.detail,\n        task: this.task\n      }\n    }));\n\n  }\n}\ncustomElements.define('todo-item', TodoItem);","import { LitElement, html, css } from 'lit-element';\n\nclass TodoList extends LitElement {\n\n  static get properties() {\n    return {\n      tasks: { type: Array },\n      query: { type: String },\n      order: { type: String }\n    };\n  }\n\n  static get styles() {\n    return css`\n    :host {\n      display: block;\n      margin: 15px 0;\n      padding: 15px;\n      border: 1px solid #4ae;\n      border-radius: 10px;\n      font-family: sans-serif;\n    }\n    section {\n      margin-left: 10px;\n    }\n    article {\n      flex-grow: 1;\n    }\n    button {\n      margin-right: 15px;\n    }\n    div {\n      border-radius: 10px;\n      height: 30px;\n      background-color: #eee;\n      margin-bottom: 15px;\n      display: flex;\n      align-items: center;\n      padding: 0 15px;\n    }\n    span {\n      margin-right: 10px;\n    }\n    `;\n  }\n\n  constructor() {\n    super();\n    this.items = [];\n    this.order = 'asc';\n    this.query = '';\n  }\n\n  render() {\n    return html`\n      <div>\n        <article>\n          <button @click=${this.setFilterAsc}>Asc</button>\n          <button @click=\"${this.setFilterDesc}\">Desc</button>\n        </article>\n        <span>Filtro:</span> <input type=\"text\" @input=\"${this.changeFilter}\">\n      </div>\n      ${\n        this.getItems(this.tasks, this.query, this.order).map( item => html`<todo-item .task=${item}></todo-item>`)\n      }\n    `;\n  }\n\n  getItems(tasks, query, order) {\n    return this.doOrder(this.doFilter(tasks, query), order);\n  }\n\n  doFilter(tasks, query) {\n    console.log('dofilter')\n    return tasks.filter(item => {\n      if(!query) {\n        console.log('no !query')\n        return true;\n      }\n      if (item.name.indexOf(query) != -1) {\n        console.log('hay indexof')        \n        return true;\n      }\n      console.log('false')\n      return false;\n    });\n  }\n\n  setFilterAsc() {\n    console.log('setfilterasc')\n    this.order = 'asc';\n  }\n  setFilterDesc() {\n    console.log('setfilter desc')\n    this.order = 'desc';\n  }\n\n  changeFilter(e) {\n    this.query = e.target.value;\n  }\n\n  doOrder(tasks, order) {\n    console.log('doOrder', tasks, order)\n    return tasks.sort((a, b) => {\n      let nameA, nameB;\n      if(order == 'asc') {\n        nameA = a.name.toLowerCase();\n        nameB = b.name.toLowerCase();\n      } else {\n        nameB = a.name.toLowerCase();\n        nameA = b.name.toLowerCase();\n      }\n      if(nameA > nameB) {\n        return 1;\n      }\n      if(nameA < nameB) {\n        return -1;\n      }\n      return 0;\n    });\n  }\n}\ncustomElements.define('todo-list', TodoList);","import { LitElement, html, css } from 'lit-element';\n/**\n * # Polydile Input\n * \n * <dile-input></dile-input>\n * \n * Input text field Web Component, with customized design. Based on LitElement.\n * \n * ## Styling\n * \n * ```\n * <dile-input \n *   label=\"Text to the label\"\n *   value=\"Text to the input\"\n *   placeholder=\"Some text\"\n *   disabled\n * ></dile-input>\n * ```\n *\n * Custom property | Description | Default\n * ----------------|-------------|---------\n * --dile-input-label-color | Mixin applied to entire element | #59e\n * --dile-input-border-size | Input element border size | 1px\n * --dile-input-border-color | Input element border color | #888 \n * --dile-input-focus-border-color | Input element border on focus | #6af\n * --dile-input-disabled-border-color | Input element border when disabled | #eee\n * --dile-input-label-font-size | Font size for the label | 1em\n * --dile-input-label-color | Color for the label text | #59e\n * \n * @customElement\n * @litElement\n */\n\nclass DileInput extends LitElement {\n\n  /**\n   * Fired when user press enter key.\n   *\n   * @event enter-pressed\n   */\n\n  /**\n   * Liten to the native input event to recive text input updates \n   *\n   * @event input\n   */\n\n  static get properties() {\n    return {\n      /** Label to the element */\n      label: { type: String },\n\n      /** Set a placeholder to the input element */\n      placeholder: { type: String },\n\n      /** Disable the input field */\n      disabled: { type: Boolean },\n\n      /** Set initial value to the input. This property syncs to the input field value property */\n      value: { type: String },\n\n      /** Name for this input field */\n      name: { type: String },\n    };\n  }\n  constructor() {\n    super();\n    this.placeholder = '';\n    this.label = '';\n    this.value = '';\n    this.disabled = false;\n    this.name = '';\n  }\n  static get styles() {\n    return css`\n    * {\n      box-sizing: border-box;\n    }\n    :host {\n      display: block;\n      margin-bottom: 10px;\n    }\n    label {\n      display: block;\n      margin-bottom: 4px;\n      font-size: var(--dile-input-label-font-size, 1em);\n      color: var(--dile-input-label-color, #59e);\n    }\n    input {\n      box-sizing: border-box;\n      border-radius: 5px;\n      border: var(--dile-input-border-size, 1px) solid var(--dile-input-border-color, #888);\n      font-size: 1em;\n      padding: 5px;\n      width: 100%;\n    }\n    input:focus {\n      outline: none;\n      border-color: var(--dile-input-focus-border-color, #6af)\n    }\n    input::placeholder {\n      color: #ccc;\n    }\n    input:disabled {\n      background-color: #f5f5f5;\n      border-color: var(--dile-input-disabled-border-color, #eee);\n    }\n    `;\n  }\n  render() {\n    return html`\n    <div>\n      ${this.label\n        ? html`<label for=\"textField\">${this.label}:</label>`\n        : ''\n      }\n      <input \n        type=\"text\" \n        id=\"textField\" \n        name=\"${this.name}\"\n        placeholder=\"${this.placeholder}\" \n        ?disabled=\"${this.disabled}\" \n        @keypress=\"${this._lookForEnter}\"\n        @input=\"${this._input}\"\n        .value=\"${this.value}\">\n    </div>\n    `;\n  }\n  /**\n   * Private method to dispatch events on enter key pressed\n   *\n   * @return {!IronRequestElement}\n   */\n  _lookForEnter(e) {\n    let keycode = (e.keyCode ? e.keyCode : e.which);\n    if (keycode == '13') {\n        this.dispatchEvent(new CustomEvent('enter-pressed'));\n    }\n  }\n  _input(e) {\n    this.value = e.target.value;\n  }\n  \n}\ncustomElements.define('dile-input', DileInput);","import { LitElement, html } from 'lit-element';\nimport 'dile-input/dile-input'\n\nclass TodoAdd extends LitElement {\n  static get properties() {\n    return {\n      value: { type: String }\n    };\n  }\n\n  constructor() {\n    super();\n    this.value = '';\n  }\n\n  render() {\n    return html`\n      <dile-input\n        label=\"Nueva tarea\"\n        value=\"${this.value}\"\n        placeholder=\"Escribe la tarea y pulsa enter\"\n        @enter-pressed=\"${this.createTask}\"\n        @input=\"${(e) => this.value = e.target.value}\"\n      ></dile-input>\n    `;\n  }\n\n  createTask(e) {\n    this.dispatchEvent(new CustomEvent('task-added', {\n      detail: e.target.value\n    }));\n    this.value = '';\n  }\n}\ncustomElements.define('todo-add', TodoAdd);","import { LitElement, html, css } from 'lit-element';\nimport './components/todo-item';\nimport './components/todo-list';\nimport './components/todo-add';\n\nclass TodoApp extends LitElement {\n\tstatic get properties() {\n\t\treturn {\n\t\t\ttodos: { type: Array },\n\t\t};\n\t}\n\tconstructor() {\n\t\tsuper();\n\t\tthis.todos =  [\n      {\n        name: 'Tarea1',\n\t\t\t\tcompleted: false,\n\t\t\t\tid: 0\n      },\n      {\n        name: 'Zapatos al zapatero',\n\t\t\t\tcompleted: true,\n\t\t\t\tid: 1\n      },\n      {\n        name: 'Algo diferente',\n        completed: false,\n\t\t\t\tid: 2\n      },\n    ]  \n\t}\n\n\tstatic get styles() {\n\t\tconsole.log('estilos');\n\t\treturn css`\n\t\t:host {\n\t\t\tdisplay: block;\n\t\t\tpadding: 15px;\n\t\t}\n\t\t`;\n\t}\n\n\trender() {\n\t\treturn html`\n\t\t\t<h1>Todo app</h1>\n\n\t\t\t<todo-add \n\t\t\t\t@task-added=\"${this.createTask}\"\n\t\t\t></todo-add>\n\t\t\t<todo-list \n\t\t\t\tid=\"listado\" \n\t\t\t\t.tasks=\"${this.todos}\"\n\t\t\t\t@task-changed=\"${this.taskChanged}\"\n\t\t\t></todo-list>\n\t\t`;\n\t}\n\n\tcreateTask(e) {\n\t\t//console.log('createTask', e.detail);\n\t\t// this.todos.push({\n\t\t// \tname: e.detail,\n\t\t// \tcompleted: false\n\t\t// });\n\t\t// this.shadowRoot.getElementById('listado').requestUpdate();\n\t\tthis.todos = [\n\t\t\t...this.todos,\n\t\t\t{\n\t\t\t\tname: e.detail,\n\t\t\t\tcompleted: false,\n\t\t\t\tid: this.todos.length\n\t\t\t}\n\t\t]\n\t}\n\n\ttaskChanged(e) {\n\t\tconsole.log('taskChanged', e.detail);\n\t\tthis.todos = this.todos.map( item => {\n\t\t\tif(item.id == e.detail.task.id) {\n\t\t\t\treturn {\n\t\t\t\t\t...item,\n\t\t\t\t\tcompleted: e.detail.state\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn item;\n\t\t\t}\n\t\t});\n\t}\n\n}\n\ncustomElements.define('todo-app', TodoApp);\n"],"names":["directives","WeakMap","isDirective","o","has","isCEPolyfill","undefined","window","customElements","polyfillWrapFlushCallback","removeNodes","container","startNode","endNode","node","n","nextSibling","removeChild","noChange","nothing","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","boundAttributeSuffix","Template","[object Object]","result","element","parts","index","partIndex","nodesToRemove","_prepareTemplate","template","content","walker","document","createTreeWalker","lastPartIndex","nextNode","currentNode","nodeType","hasAttributes","attributes","count","i","length","value","indexOf","stringForPart","strings","name","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","getAttribute","split","push","type","removeAttribute","tagName","data","parent","parentNode","lastIndex","insertBefore","createMarker","createTextNode","previousSibling","isTemplatePartActive","part","createComment","TemplateInstance","processor","options","_parts","values","this","setValue","commit","fragment","cloneNode","importNode","nodeIndex","_prepareInstance","handleTextExpression","insertAfterNode","handleAttributeExpressions","nodeName","adoptNode","upgrade","TemplateResult","endIndex","html","s","match","substr","createElement","innerHTML","getHTML","isPrimitive","AttributeCommitter","dirty","_createPart","AttributePart","l","text","v","Array","isArray","Symbol","iterator","t","setAttribute","_getValue","comitter","committer","directive","NodePart","_pendingValue","appendChild","ref","_insert","_commitText","_commitTemplateResult","Node","_commitNode","_commitIterable","clear","templateFactory","update","instance","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","BooleanAttributePart","Error","PropertyCommitter","single","PropertyPart","super","eventOptionsSupported","addEventListener","removeEventListener","_e","EventPart","eventName","eventContext","_boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","capture","once","passive","shouldAddListener","_options","getOptions","event","call","defaultTemplateProcessor","prefix","templateCache","templateCaches","get","stringsArray","keyString","Map","set","key","join","getTemplateElement","walkerNodeFilter","removeNodesFromTemplate","nextActiveIndexInTemplateParts","removeCount","nodesToRemoveInTemplate","currentRemovingNode","forEach","countNodes","getTemplateCacheKey","scopeName","compatibleShadyCSSVersion","ShadyCSS","prepareTemplateDom","console","warn","shadyTemplateFactory","cacheKey","TEMPLATE_TYPES","shadyRenderSet","Set","prepareTemplateStyles","renderedDOM","add","styles","querySelectorAll","condensedStyle","style","textContent","templates","from","removeStylesFromLitTemplates","refNode","insertCount","walkerIndex","insertNodeIntoTemplate","firstChild","nativeShadow","querySelector","removes","JSCompiler_renameProperty","prop","_obj","defaultConverter","Boolean","Object","JSON","stringify","Number","parse","notEqual","old","defaultPropertyDeclaration","attribute","converter","reflect","hasChanged","microtaskPromise","Promise","resolve","STATE_HAS_UPDATED","STATE_UPDATE_REQUESTED","STATE_IS_REFLECTING_TO_ATTRIBUTE","STATE_IS_REFLECTING_TO_PROPERTY","STATE_HAS_CONNECTED","UpdatingElement","HTMLElement","_updateState","_instanceProperties","_updatePromise","_hasConnectedResolver","_changedProperties","_reflectingProperties","initialize","finalize","_classProperties","p","attr","_attributeNameForProperty","_attributeToPropertyMap","hasOwnProperty","superProperties","getPrototypeOf","k","_ensureClassProperties","noAccessor","prototype","defineProperty","oldValue","_requestUpdate","configurable","enumerable","finalized","superCtor","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","createProperty","fromAttribute","toAttribute","_saveInstanceProperties","constructor","_v","_attributeToProperty","ctor","attrValue","_propertyValueToAttribute","propName","_propertyValueFromAttribute","shouldRequestUpdate","_valueHasChanged","_hasRequestedUpdate","_enqueueUpdate","updateComplete","reject","previousUpdatePromise","res","rej","_hasConnected","performUpdate","_applyInstanceProperties","shouldUpdate","changedProperties","_markUpdated","firstUpdated","updated","size","_propertyToAttribute","supportsAdoptingStyleSheets","Document","CSSStyleSheet","constructionToken","CSSResult","cssText","safeToken","_styleSheet","replaceSync","css","reduce","acc","idx","textFromCSSResult","flattenStyles","flat","Infinity","arrayFlat","LitElement","_styles","_getUniqueStyles","userStyles","reduceRight","unshift","renderRoot","createRenderRoot","ShadowRoot","adoptStyles","attachShadow","mode","adoptedStyleSheets","map","styleSheet","_needsShimAdoptedStyleSheets","ScopingShim","prepareAdoptedCssText","localName","connectedCallback","hasUpdated","styleElement","templateResult","render","hasRendered","needsScoping","firstScopeRender","renderContainer","createDocumentFragment","assign","appendInto","litRender","delete","host","define","checked","doClick","checkedIcon","unCheckedIcon","dispatchEvent","CustomEvent","bubbles","composed","detail","task","completed","checkedChanged","state","tasks","query","order","items","setFilterAsc","setFilterDesc","changeFilter","getItems","doOrder","doFilter","log","filter","target","sort","a","b","nameA","nameB","label","placeholder","disabled","_lookForEnter","_input","keyCode","which","createTask","todos","id","taskChanged"],"mappings":"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"}