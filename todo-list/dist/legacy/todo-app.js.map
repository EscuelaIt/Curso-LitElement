{"version":3,"file":"todo-app.js","sources":["../../node_modules/lit-html/lib/directive.js","../../node_modules/lit-html/lib/dom.js","../../node_modules/lit-html/lib/part.js","../../node_modules/lit-html/lib/template.js","../../node_modules/lit-html/lib/template-instance.js","../../node_modules/lit-html/lib/template-result.js","../../node_modules/lit-html/lib/parts.js","../../node_modules/lit-html/lib/default-template-processor.js","../../node_modules/lit-html/lib/template-factory.js","../../node_modules/lit-html/lib/render.js","../../node_modules/lit-html/lit-html.js","../../node_modules/lit-html/lib/modify-template.js","../../node_modules/lit-html/lib/shady-render.js","../../node_modules/lit-element/lib/updating-element.js","../../node_modules/lit-element/lib/css-tag.js","../../node_modules/lit-element/lit-element.js","../../src/components/eit-switch.js","../../src/components/todo-item.js","../../src/components/todo-list.js","../../node_modules/dile-input/dile-input.js","../../src/components/todo-add.js","../../src/todo-app.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive so that lit-html will call the function\n * during template rendering, rather than passing as a value.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object\n *\n * @example\n *\n * ```\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n * ```\n */\n// tslint:disable-next-line:no-any\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), into another container (could be the same container), before\n * `beforeNode`. If `beforeNode` is null, it appends the nodes to the\n * container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    let node = start;\n    while (node !== end) {\n        const n = node.nextSibling;\n        container.insertBefore(node, before);\n        node = n;\n    }\n};\n/**\n * Removes nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), from `container`.\n */\nexport const removeNodes = (container, startNode, endNode = null) => {\n    let node = startNode;\n    while (node !== endNode) {\n        const n = node.nextSibling;\n        container.removeChild(node);\n        node = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        let index = -1;\n        let partIndex = 0;\n        const nodesToRemove = [];\n        const _prepareTemplate = (template) => {\n            const content = template.content;\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n            // Keeps track of the last index associated with a part. We try to delete\n            // unnecessary nodes, but we never want to associate two different parts\n            // to the same index. They must have a constant node between.\n            let lastPartIndex = 0;\n            while (walker.nextNode()) {\n                index++;\n                const node = walker.currentNode;\n                if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                    if (node.hasAttributes()) {\n                        const attributes = node.attributes;\n                        // Per\n                        // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                        // attributes are not guaranteed to be returned in document order.\n                        // In particular, Edge/IE can return them out of order, so we cannot\n                        // assume a correspondance between part index and attribute index.\n                        let count = 0;\n                        for (let i = 0; i < attributes.length; i++) {\n                            if (attributes[i].value.indexOf(marker) >= 0) {\n                                count++;\n                            }\n                        }\n                        while (count-- > 0) {\n                            // Get the template literal section leading up to the first\n                            // expression in this attribute\n                            const stringForPart = result.strings[partIndex];\n                            // Find the attribute name\n                            const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                            // Find the corresponding attribute\n                            // All bound attributes have had a suffix added in\n                            // TemplateResult#getHTML to opt out of special attribute\n                            // handling. To look up the attribute value we also need to add\n                            // the suffix.\n                            const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                            const attributeValue = node.getAttribute(attributeLookupName);\n                            const strings = attributeValue.split(markerRegex);\n                            this.parts.push({ type: 'attribute', index, name, strings });\n                            node.removeAttribute(attributeLookupName);\n                            partIndex += strings.length - 1;\n                        }\n                    }\n                    if (node.tagName === 'TEMPLATE') {\n                        _prepareTemplate(node);\n                    }\n                }\n                else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                    const data = node.data;\n                    if (data.indexOf(marker) >= 0) {\n                        const parent = node.parentNode;\n                        const strings = data.split(markerRegex);\n                        const lastIndex = strings.length - 1;\n                        // Generate a new text node for each literal section\n                        // These nodes are also used as the markers for node parts\n                        for (let i = 0; i < lastIndex; i++) {\n                            parent.insertBefore((strings[i] === '') ? createMarker() :\n                                document.createTextNode(strings[i]), node);\n                            this.parts.push({ type: 'node', index: ++index });\n                        }\n                        // If there's no text, we must insert a comment to mark our place.\n                        // Else, we can trust it will stick around after cloning.\n                        if (strings[lastIndex] === '') {\n                            parent.insertBefore(createMarker(), node);\n                            nodesToRemove.push(node);\n                        }\n                        else {\n                            node.data = strings[lastIndex];\n                        }\n                        // We have a part for each match found\n                        partIndex += lastIndex;\n                    }\n                }\n                else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                    if (node.data === marker) {\n                        const parent = node.parentNode;\n                        // Add a new marker node to be the startNode of the Part if any of\n                        // the following are true:\n                        //  * We don't have a previousSibling\n                        //  * The previousSibling is already the start of a previous part\n                        if (node.previousSibling === null || index === lastPartIndex) {\n                            index++;\n                            parent.insertBefore(createMarker(), node);\n                        }\n                        lastPartIndex = index;\n                        this.parts.push({ type: 'node', index });\n                        // If we don't have a nextSibling, keep this node so we have an end.\n                        // Else, we can remove it to save future costs.\n                        if (node.nextSibling === null) {\n                            node.data = '';\n                        }\n                        else {\n                            nodesToRemove.push(node);\n                            index--;\n                        }\n                        partIndex++;\n                    }\n                    else {\n                        let i = -1;\n                        while ((i = node.data.indexOf(marker, i + 1)) !==\n                            -1) {\n                            // Comment node has a binding marker inside, make an inactive part\n                            // The binding won't work, but subsequent bindings will\n                            // TODO (justinfagnani): consider whether it's even worth it to\n                            // make bindings in comments work\n                            this.parts.push({ type: 'node', index: -1 });\n                        }\n                    }\n                }\n            }\n        };\n        _prepareTemplate(element);\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#attributes-0\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-character\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this._parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this._parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this._parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // When using the Custom Elements polyfill, clone the node, rather than\n        // importing it, to keep the fragment in the template's document. This\n        // leaves the fragment inert so custom elements won't upgrade and\n        // potentially modify their contents by creating a polyfilled ShadowRoot\n        // while we traverse the tree.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const parts = this.template.parts;\n        let partIndex = 0;\n        let nodeIndex = 0;\n        const _prepareInstance = (fragment) => {\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n            let node = walker.nextNode();\n            // Loop through all the nodes and parts of a template\n            while (partIndex < parts.length && node !== null) {\n                const part = parts[partIndex];\n                // Consecutive Parts may have the same node index, in the case of\n                // multiple bound attributes on an element. So each iteration we either\n                // increment the nodeIndex, if we aren't on a node with a part, or the\n                // partIndex if we are. By not incrementing the nodeIndex when we find a\n                // part, we allow for the next part to be associated with the current\n                // node if neccessasry.\n                if (!isTemplatePartActive(part)) {\n                    this._parts.push(undefined);\n                    partIndex++;\n                }\n                else if (nodeIndex === part.index) {\n                    if (part.type === 'node') {\n                        const part = this.processor.handleTextExpression(this.options);\n                        part.insertAfterNode(node.previousSibling);\n                        this._parts.push(part);\n                    }\n                    else {\n                        this._parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n                    }\n                    partIndex++;\n                }\n                else {\n                    nodeIndex++;\n                    if (node.nodeName === 'TEMPLATE') {\n                        _prepareInstance(node.content);\n                    }\n                    node = walker.nextNode();\n                }\n            }\n        };\n        _prepareInstance(fragment);\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const endIndex = this.strings.length - 1;\n        let html = '';\n        for (let i = 0; i < endIndex; i++) {\n            const s = this.strings[i];\n            // This exec() call does two things:\n            // 1) Appends a suffix to the bound attribute name to opt out of special\n            // attribute value parsing that IE11 and Edge do, like for style and\n            // many SVG attributes. The Template class also appends the same suffix\n            // when looking up attributes to create Parts.\n            // 2) Adds an unquoted-attribute-safe marker for the first expression in\n            // an attribute. Subsequent attribute expressions will use node markers,\n            // and this is safe since attributes with multiple expressions are\n            // guaranteed to be quoted.\n            const match = lastAttributeNameRegex.exec(s);\n            if (match) {\n                // We're starting a new bound attribute.\n                // Add the safe attribute suffix, and use unquoted-attribute-safe\n                // marker.\n                html += s.substr(0, match.index) + match[1] + match[2] +\n                    boundAttributeSuffix + match[3] + marker;\n            }\n            else {\n                // We're either in a bound node, or trailing bound attribute.\n                // Either way, nodeMarker is safe to use.\n                html += s + nodeMarker;\n            }\n        }\n        return html + this.strings[endIndex];\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTMl in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\n/**\n * Sets attribute values for AttributeParts, so that the value is only set once\n * even if there are multiple parts for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (v != null &&\n                    (Array.isArray(v) ||\n                        // tslint:disable-next-line:no-any\n                        typeof v !== 'string' && v[Symbol.iterator])) {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n                else {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\nexport class AttributePart {\n    constructor(comitter) {\n        this.value = undefined;\n        this.committer = comitter;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Inserts this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part between `ref` and `ref`'s next sibling. Both `ref` and\n     * its next sibling must be static, unchanging nodes such as those that appear\n     * in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part._insert(this.startNode = createMarker());\n        part._insert(this.endNode = createMarker());\n    }\n    /**\n     * Appends this part after `ref`\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref._insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        const value = this._pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this._commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this._commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this._commitNode(value);\n        }\n        else if (Array.isArray(value) ||\n            // tslint:disable-next-line:no-any\n            value[Symbol.iterator]) {\n            this._commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this._commitText(value);\n        }\n    }\n    _insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    _commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this._insert(value);\n        this.value = value;\n    }\n    _commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = value;\n        }\n        else {\n            this._commitNode(document.createTextNode(typeof value === 'string' ? value : String(value)));\n        }\n        this.value = value;\n    }\n    _commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this._commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    _commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        if (this._pendingValue === noChange) {\n            return;\n        }\n        const value = !!this._pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n        }\n        this.value = value;\n        this._pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // tslint:disable-next-line:no-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line:no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line:no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this._boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        if (this._pendingValue === noChange) {\n            return;\n        }\n        const newListener = this._pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this._boundHandleEvent, this._options);\n        }\n        if (shouldAddListener) {\n            this._options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this._boundHandleEvent, this._options);\n        }\n        this.value = newListener;\n        this._pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const comitter = new PropertyCommitter(element, name.slice(1), strings);\n            return comitter.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const comitter = new AttributeCommitter(element, name, strings);\n        return comitter.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.0.0');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module shady-render\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @module shady-render\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { marker, Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected.` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    const key = result.strings.join(marker);\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n    }\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.keyString.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (renderedDOM, template, scopeName) => {\n    shadyRenderSet.add(scopeName);\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    // If there are no styles, skip unnecessary work\n    if (styles.length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < styles.length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    insertNodeIntoTemplate(template, condensedStyle, template.element.content.firstChild);\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);\n    if (window.ShadyCSS.nativeShadow) {\n        // When in native Shadow DOM, re-add styling to rendered content using\n        // the style ShadyCSS produced.\n        const style = template.element.content.querySelector('style');\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else {\n        // When not in native Shadow DOM, at this point ShadyCSS will have\n        // removed the style from the lit template and parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        template.element.content.insertBefore(condensedStyle, template.element.content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render = (result, container, options) => {\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    const needsScoping = container instanceof ShadowRoot &&\n        compatibleShadyCSSVersion && result instanceof TemplateResult;\n    // Handle first render to a scope specially...\n    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n    // On first scope render, render into a fragment; this cannot be a single\n    // fragment that is reused since nested renders can occur synchronously.\n    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n    litRender(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When performing first scope render,\n    // (1) We've rendered into a fragment so that there's a chance to\n    // `prepareTemplateStyles` before sub-elements hit the DOM\n    // (which might cause them to render based on a common pattern of\n    // rendering in a custom element's `connectedCallback`);\n    // (2) Scope the template with ShadyCSS one time only for this scope.\n    // (3) Render the fragment into the container and make sure the\n    // container knows its `part` is the one we just rendered. This ensures\n    // DOM will be re-used on subsequent renders.\n    if (firstScopeRender) {\n        const part = parts.get(renderContainer);\n        parts.delete(renderContainer);\n        if (part.value instanceof TemplateInstance) {\n            prepareTemplateStyles(renderContainer, part.value.template, scopeName);\n        }\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n    }\n    // After elements have hit the DOM, update styling if this is the\n    // initial render to this container.\n    // This is needed whenever dynamic changes are made so it would be\n    // safest to do every render; however, this would regress performance\n    // so we leave it up to the user to call `ShadyCSSS.styleElement`\n    // for dynamic changes.\n    if (!hasRendered && needsScoping) {\n        window.ShadyCSS.styleElement(container.host);\n    }\n};\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    (prop, _obj) => prop;\nexport const defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value ? '' : null;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                return value == null ? value : JSON.stringify(value);\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value !== null;\n            case Number:\n                return value === null ? null : Number(value);\n            case Object:\n            case Array:\n                return JSON.parse(value);\n        }\n        return value;\n    }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst microtaskPromise = Promise.resolve(true);\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\nconst STATE_HAS_CONNECTED = 1 << 5;\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        this._updatePromise = microtaskPromise;\n        this._hasConnectedResolver = undefined;\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this._classProperties.forEach((v, p) => {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Ensures the private `_classProperties` property metadata is created.\n     * In addition to `finalize` this is also called in `createProperty` to\n     * ensure the `@property` decorator can add property metadata.\n     */\n    /** @nocollapse */\n    static _ensureClassProperties() {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     * @nocollapse\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure storage exists for property\n        // metadata.\n        this._ensureClassProperties();\n        this._classProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user's intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        Object.defineProperty(this.prototype, name, {\n            // tslint:disable-next-line:no-any no symbol in index\n            get() {\n                return this[key];\n            },\n            set(value) {\n                // tslint:disable-next-line:no-any no symbol in index\n                const oldValue = this[name];\n                // tslint:disable-next-line:no-any no symbol in index\n                this[key] = value;\n                this._requestUpdate(name, oldValue);\n            },\n            configurable: true,\n            enumerable: true\n        });\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        if (this.hasOwnProperty(JSCompiler_renameProperty('finalized', this)) &&\n            this.finalized) {\n            return;\n        }\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (typeof superCtor.finalize === 'function') {\n            superCtor.finalize();\n        }\n        this.finalized = true;\n        this._ensureClassProperties();\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process \"own\" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...(typeof Object.getOwnPropertySymbols === 'function') ?\n                    Object.getOwnPropertySymbols(props) :\n                    []\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeSript lack of support for symbol in\n                // index types\n                // tslint:disable-next-line:no-any no symbol in index\n                this.createProperty(p, props[p]);\n            }\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false ?\n            undefined :\n            (typeof attribute === 'string' ?\n                attribute :\n                (typeof name === 'string' ? name.toLowerCase() : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     * @nocollapse\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's\n     * `converter` or `converter.fromAttribute` property option.\n     * @nocollapse\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options.type;\n        const converter = options.converter || defaultConverter;\n        const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);\n        return fromAttribute ? fromAttribute(value, type) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     * @nocollapse\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options.reflect === undefined) {\n            return;\n        }\n        const type = options.type;\n        const converter = options.converter;\n        const toAttribute = converter && converter.toAttribute ||\n            defaultConverter.toAttribute;\n        return toAttribute(value, type);\n    }\n    /**\n     * Performs element initialization. By default captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this._saveInstanceProperties();\n        // ensures first update will be caught by an early access of `updateComplete`\n        this._requestUpdate();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor\n            ._classProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        });\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        // tslint:disable-next-line:no-any\n        this._instanceProperties.forEach((v, p) => this[p] = v);\n        this._instanceProperties = undefined;\n    }\n    connectedCallback() {\n        this._updateState = this._updateState | STATE_HAS_CONNECTED;\n        // Ensure first connection completes an update. Updates cannot complete before\n        // connection and if one is pending connection the `_hasConnectionResolver`\n        // will exist. If so, resolve it to complete the update, otherwise\n        // requestUpdate.\n        if (this._hasConnectedResolver) {\n            this._hasConnectedResolver();\n            this._hasConnectedResolver = undefined;\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() {\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attr = ctor._attributeNameForProperty(name, options);\n        if (attr !== undefined) {\n            const attrValue = ctor._propertyValueToAttribute(value, options);\n            // an undefined value does not change the attribute.\n            if (attrValue === undefined) {\n                return;\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we'd like to discover).\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n            return;\n        }\n        const ctor = this.constructor;\n        const propName = ctor._attributeToPropertyMap.get(name);\n        if (propName !== undefined) {\n            const options = ctor._classProperties.get(propName) || defaultPropertyDeclaration;\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n            this[propName] =\n                // tslint:disable-next-line:no-any\n                ctor._propertyValueFromAttribute(value, options);\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n        }\n    }\n    /**\n     * This private version of `requestUpdate` does not access or return the\n     * `updateComplete` promise. This promise can be overridden and is therefore\n     * not free to access.\n     */\n    _requestUpdate(name, oldValue) {\n        let shouldRequestUpdate = true;\n        // If we have a property key, perform property update steps.\n        if (name !== undefined) {\n            const ctor = this.constructor;\n            const options = ctor._classProperties.get(name) || defaultPropertyDeclaration;\n            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n                if (!this._changedProperties.has(name)) {\n                    this._changedProperties.set(name, oldValue);\n                }\n                // Add to reflecting properties set.\n                // Note, it's important that every change has a chance to add the\n                // property to `_reflectingProperties`. This ensures setting\n                // attribute + property reflects correctly.\n                if (options.reflect === true &&\n                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n                    if (this._reflectingProperties === undefined) {\n                        this._reflectingProperties = new Map();\n                    }\n                    this._reflectingProperties.set(name, options);\n                }\n            }\n            else {\n                // Abort the request if the property should not be considered changed.\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n            this._enqueueUpdate();\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        this._requestUpdate(name, oldValue);\n        return this.updateComplete;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async _enqueueUpdate() {\n        // Mark state updating...\n        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n        let resolve;\n        let reject;\n        const previousUpdatePromise = this._updatePromise;\n        this._updatePromise = new Promise((res, rej) => {\n            resolve = res;\n            reject = rej;\n        });\n        try {\n            // Ensure any previous update has resolved before updating.\n            // This `await` also ensures that property changes are batched.\n            await previousUpdatePromise;\n        }\n        catch (e) {\n            // Ignore any previous errors. We only care that the previous cycle is\n            // done. Any error should have been handled in the previous update.\n        }\n        // Make sure the element has connected before updating.\n        if (!this._hasConnected) {\n            await new Promise((res) => this._hasConnectedResolver = res);\n        }\n        try {\n            const result = this.performUpdate();\n            // If `performUpdate` returns a Promise, we await it. This is done to\n            // enable coordinating updates with a scheduler. Note, the result is\n            // checked to avoid delaying an additional microtask unless we need to.\n            if (result != null) {\n                await result;\n            }\n        }\n        catch (e) {\n            reject(e);\n        }\n        resolve(!this._hasRequestedUpdate);\n    }\n    get _hasConnected() {\n        return (this._updateState & STATE_HAS_CONNECTED);\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    get hasUpdated() {\n        return (this._updateState & STATE_HAS_UPDATED);\n    }\n    /**\n     * Performs an element update. Note, if an exception is thrown during the\n     * update, `firstUpdated` and `updated` will not be called.\n     *\n     * You can override this method to change the timing of updates. If this\n     * method is overridden, `super.performUpdate()` must be called.\n     *\n     * For instance, to schedule updates to occur just before the next frame:\n     *\n     * ```\n     * protected async performUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.performUpdate();\n     * }\n     * ```\n     */\n    performUpdate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        let shouldUpdate = false;\n        const changedProperties = this._changedProperties;\n        try {\n            shouldUpdate = this.shouldUpdate(changedProperties);\n            if (shouldUpdate) {\n                this.update(changedProperties);\n            }\n        }\n        catch (e) {\n            // Prevent `firstUpdated` and `updated` from running when there's an\n            // update exception.\n            shouldUpdate = false;\n            throw e;\n        }\n        finally {\n            // Ensure element can accept additional updates after an exception.\n            this._markUpdated();\n        }\n        if (shouldUpdate) {\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. If the Promise is rejected, an\n     * exception was thrown during the update. This getter can be implemented to\n     * await additional state. For example, it is sometimes useful to await a\n     * rendered element before fulfilling this Promise. To do this, first await\n     * `super.updateComplete` then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() {\n        return this._updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));\n            this._reflectingProperties = undefined;\n        }\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) {\n    }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) {\n    }\n}\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement.finalized = true;\n//# sourceMappingURL=updating-element.js.map","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nexport const supportsAdoptingStyleSheets = ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\nconst constructionToken = Symbol();\nexport class CSSResult {\n    constructor(cssText, safeToken) {\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it's lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        if (this._styleSheet === undefined) {\n            // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n            // is constructable.\n            if (supportsAdoptingStyleSheets) {\n                this._styleSheet = new CSSStyleSheet();\n                this._styleSheet.replaceSync(this.cssText);\n            }\n            else {\n                this._styleSheet = null;\n            }\n        }\n        return this._styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value) => {\n    return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = (value) => {\n    if (value instanceof CSSResult) {\n        return value.cssText;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n    }\n};\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css = (strings, ...values) => {\n    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n//# sourceMappingURL=css-tag.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { TemplateResult } from 'lit-html';\nimport { render } from 'lit-html/lib/shady-render.js';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg, TemplateResult, SVGTemplateResult } from 'lit-html/lit-html.js';\nimport { supportsAdoptingStyleSheets } from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.0.1');\n/**\n * Minimal implementation of Array.prototype.flat\n * @param arr the array to flatten\n * @param result the accumlated result\n */\nfunction arrayFlat(styles, result = []) {\n    for (let i = 0, length = styles.length; i < length; i++) {\n        const value = styles[i];\n        if (Array.isArray(value)) {\n            arrayFlat(value, result);\n        }\n        else {\n            result.push(value);\n        }\n    }\n    return result;\n}\n/** Deeply flattens styles array. Uses native flat if available. */\nconst flattenStyles = (styles) => styles.flat ? styles.flat(Infinity) : arrayFlat(styles);\nexport class LitElement extends UpdatingElement {\n    /** @nocollapse */\n    static finalize() {\n        super.finalize();\n        // Prepare styling that is stamped at first render time. Styling\n        // is built from user provided `styles` or is inherited from the superclass.\n        this._styles =\n            this.hasOwnProperty(JSCompiler_renameProperty('styles', this)) ?\n                this._getUniqueStyles() :\n                this._styles || [];\n    }\n    /** @nocollapse */\n    static _getUniqueStyles() {\n        // Take care not to call `this.styles` multiple times since this generates\n        // new CSSResults each time.\n        // TODO(sorvell): Since we do not cache CSSResults by input, any\n        // shared styles will generate new stylesheet objects, which is wasteful.\n        // This should be addressed when a browser ships constructable\n        // stylesheets.\n        const userStyles = this.styles;\n        const styles = [];\n        if (Array.isArray(userStyles)) {\n            const flatStyles = flattenStyles(userStyles);\n            // As a performance optimization to avoid duplicated styling that can\n            // occur especially when composing via subclassing, de-duplicate styles\n            // preserving the last item in the list. The last item is kept to\n            // try to preserve cascade order with the assumption that it's most\n            // important that last added styles override previous styles.\n            const styleSet = flatStyles.reduceRight((set, s) => {\n                set.add(s);\n                // on IE set.add does not return the set.\n                return set;\n            }, new Set());\n            // Array.from does not work on Set in IE\n            styleSet.forEach((v) => styles.unshift(v));\n        }\n        else if (userStyles) {\n            styles.push(userStyles);\n        }\n        return styles;\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot`\n     * to create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        super.initialize();\n        this.renderRoot =\n            this.createRenderRoot();\n        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n        // element's getRootNode(). While this could be done, we're choosing not to\n        // support this now since it would require different logic around de-duping.\n        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n            this.adoptStyles();\n        }\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Applies styling to the element shadowRoot using the `static get styles`\n     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n     * available and will fallback otherwise. When Shadow DOM is polyfilled,\n     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n     * is available but `adoptedStyleSheets` is not, styles are appended to the\n     * end of the `shadowRoot` to [mimic spec\n     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n     */\n    adoptStyles() {\n        const styles = this.constructor._styles;\n        if (styles.length === 0) {\n            return;\n        }\n        // There are three separate cases here based on Shadow DOM support.\n        // (1) shadowRoot polyfilled: use ShadyCSS\n        // (2) shadowRoot.adoptedStyleSheets available: use it.\n        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n        // rendering\n        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);\n        }\n        else if (supportsAdoptingStyleSheets) {\n            this.renderRoot.adoptedStyleSheets =\n                styles.map((s) => s.styleSheet);\n        }\n        else {\n            // This must be done after rendering so the actual style insertion is done\n            // in `update`.\n            this._needsShimAdoptedStyleSheets = true;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note, first update/render handles styleElement so we only call this if\n        // connected after first update.\n        if (this.hasUpdated && window.ShadyCSS !== undefined) {\n            window.ShadyCSS.styleElement(this);\n        }\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        super.update(changedProperties);\n        const templateResult = this.render();\n        if (templateResult instanceof TemplateResult) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n        // When native Shadow DOM is used but adoptedStyles are not supported,\n        // insert styling after rendering to ensure adoptedStyles have highest\n        // priority.\n        if (this._needsShimAdoptedStyleSheets) {\n            this._needsShimAdoptedStyleSheets = false;\n            this.constructor._styles.forEach((s) => {\n                const style = document.createElement('style');\n                style.textContent = s.cssText;\n                this.renderRoot.appendChild(style);\n            });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method must return\n     * a lit-html TemplateResult. Setting properties inside this method will *not*\n     * trigger the element to update.\n     */\n    render() {\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n */\nLitElement.finalized = true;\n/**\n * Render method used to render the lit-html TemplateResult to the element's\n * DOM.\n * @param {TemplateResult} Template to render.\n * @param {Element|DocumentFragment} Node into which to render.\n * @param {String} Element name.\n * @nocollapse\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map","import { LitElement, html, css } from 'lit-element';\n\nclass EitSwitch extends LitElement {\n  static get properties() {\n    return {\n      checked: { type: Boolean },\n    };\n  }\n\n  constructor() {\n    super(); \n    this.checked = false;\n    // this.addEventListener('click', () => {\n    //   console.log('evento!!');\n    //   this.checked = !this.checked;\n    // });\n  }\n\n  static get styles() {\n    return css`\n    :host {\n      display: inline-block;\n    }\n    span {\n      display: flex;\n      background-color: var(--eit-switch-background-color, #95D5D5);\n      border-radius: 4px;\n      width: 20px;\n      height: 20px;\n      line-height: 0;\n      align-items: center;\n      justify-content: center;\n    }\n    .checked {\n      background-color: #4ae;\n      color: #fff;\n    }\n    path[fill=\"none\"], .checked path[fill=\"none\"] {\n      fill: transparent;\n    }\n    path {\n      fill: #fff;\n    }\n    .checked path {\n      fill: #fff;\n    }\n    `;\n  }\n\n  render() {\n    return html`\n      <span @click=\"${this.doClick}\">\n        ${this.checked\n          ? this.checkedIcon\n          : this.unCheckedIcon\n        }\n      </span>\n    `;\n  }\n\n  doClick() {\n    this.checked = !this.checked;\n    this.dispatchEvent(new CustomEvent('eit-switch-checked', {\n      bubbles: true,\n      composed: true,\n      detail: this.checked\n    }));\n  }\n\n\n  get checkedIcon() {\n    return html`<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"/></svg>`;\n  }\n  get unCheckedIcon() {\n    return html`<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\"><path d=\"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>`;\n  }\n}\ncustomElements.define('eit-switch', EitSwitch);\n","import { LitElement, html, css } from 'lit-element';\nimport './eit-switch';\n\nclass TodoItem extends LitElement {\n  static get properties() {\n    return {\n      task: { type: Object }\n    };\n  }\n\n  static get styles() {\n    return css`\n    p {\n      display: flex;\n      align-items: center;\n    }\n    eit-switch {\n      margin-right: 10px;\n    }\n    .completed {\n      text-decoration: line-through;\n      color: #888;\n    }\n    `;\n  }\n\n  render() {\n    return html`\n    <p class=\"${this.task.completed ? 'completed' : ''}\">\n      <eit-switch ?checked=\"${this.task.completed}\" @eit-switch-checked=\"${this.checkedChanged}\"></eit-switch>  ${ this.task.name }\n    </p>\n    `;\n  }\n\n  checkedChanged(e) {\n    this.dispatchEvent(new CustomEvent('task-changed', {\n      bubbles: true,\n      composed: true,\n      detail: {\n        state: e.detail,\n        task: this.task\n      }\n    }));\n\n  }\n}\ncustomElements.define('todo-item', TodoItem);","import { LitElement, html, css } from 'lit-element';\n\nclass TodoList extends LitElement {\n\n  static get properties() {\n    return {\n      tasks: { type: Array },\n      query: { type: String },\n      order: { type: String }\n    };\n  }\n\n  static get styles() {\n    return css`\n    :host {\n      display: block;\n      margin: 15px 0;\n      padding: 15px;\n      border: 1px solid #4ae;\n      border-radius: 10px;\n      font-family: sans-serif;\n    }\n    section {\n      margin-left: 10px;\n    }\n    article {\n      flex-grow: 1;\n    }\n    button {\n      margin-right: 15px;\n    }\n    div {\n      border-radius: 10px;\n      height: 30px;\n      background-color: #eee;\n      margin-bottom: 15px;\n      display: flex;\n      align-items: center;\n      padding: 0 15px;\n    }\n    span {\n      margin-right: 10px;\n    }\n    `;\n  }\n\n  constructor() {\n    super();\n    this.items = [];\n    this.order = 'asc';\n    this.query = '';\n  }\n\n  render() {\n    return html`\n      <div>\n        <article>\n          <button @click=${this.setFilterAsc}>Asc</button>\n          <button @click=\"${this.setFilterDesc}\">Desc</button>\n        </article>\n        <span>Filtro:</span> <input type=\"text\" @input=\"${this.changeFilter}\">\n      </div>\n      ${\n        this.getItems(this.tasks, this.query, this.order).map( item => html`<todo-item .task=${item}></todo-item>`)\n      }\n    `;\n  }\n\n  getItems(tasks, query, order) {\n    return this.doOrder(this.doFilter(tasks, query), order);\n  }\n\n  doFilter(tasks, query) {\n    console.log('dofilter')\n    return tasks.filter(item => {\n      if(!query) {\n        console.log('no !query')\n        return true;\n      }\n      if (item.name.indexOf(query) != -1) {\n        console.log('hay indexof')        \n        return true;\n      }\n      console.log('false')\n      return false;\n    });\n  }\n\n  setFilterAsc() {\n    console.log('setfilterasc')\n    this.order = 'asc';\n  }\n  setFilterDesc() {\n    console.log('setfilter desc')\n    this.order = 'desc';\n  }\n\n  changeFilter(e) {\n    this.query = e.target.value;\n  }\n\n  doOrder(tasks, order) {\n    console.log('doOrder', tasks, order)\n    return tasks.sort((a, b) => {\n      let nameA, nameB;\n      if(order == 'asc') {\n        nameA = a.name.toLowerCase();\n        nameB = b.name.toLowerCase();\n      } else {\n        nameB = a.name.toLowerCase();\n        nameA = b.name.toLowerCase();\n      }\n      if(nameA > nameB) {\n        return 1;\n      }\n      if(nameA < nameB) {\n        return -1;\n      }\n      return 0;\n    });\n  }\n}\ncustomElements.define('todo-list', TodoList);","import { LitElement, html, css } from 'lit-element';\n/**\n * # Polydile Input\n * \n * <dile-input></dile-input>\n * \n * Input text field Web Component, with customized design. Based on LitElement.\n * \n * ## Styling\n * \n * ```\n * <dile-input \n *   label=\"Text to the label\"\n *   value=\"Text to the input\"\n *   placeholder=\"Some text\"\n *   disabled\n * ></dile-input>\n * ```\n *\n * Custom property | Description | Default\n * ----------------|-------------|---------\n * --dile-input-label-color | Mixin applied to entire element | #59e\n * --dile-input-border-size | Input element border size | 1px\n * --dile-input-border-color | Input element border color | #888 \n * --dile-input-focus-border-color | Input element border on focus | #6af\n * --dile-input-disabled-border-color | Input element border when disabled | #eee\n * --dile-input-label-font-size | Font size for the label | 1em\n * --dile-input-label-color | Color for the label text | #59e\n * \n * @customElement\n * @litElement\n */\n\nclass DileInput extends LitElement {\n\n  /**\n   * Fired when user press enter key.\n   *\n   * @event enter-pressed\n   */\n\n  /**\n   * Liten to the native input event to recive text input updates \n   *\n   * @event input\n   */\n\n  static get properties() {\n    return {\n      /** Label to the element */\n      label: { type: String },\n\n      /** Set a placeholder to the input element */\n      placeholder: { type: String },\n\n      /** Disable the input field */\n      disabled: { type: Boolean },\n\n      /** Set initial value to the input. This property syncs to the input field value property */\n      value: { type: String },\n\n      /** Name for this input field */\n      name: { type: String },\n    };\n  }\n  constructor() {\n    super();\n    this.placeholder = '';\n    this.label = '';\n    this.value = '';\n    this.disabled = false;\n    this.name = '';\n  }\n  static get styles() {\n    return css`\n    * {\n      box-sizing: border-box;\n    }\n    :host {\n      display: block;\n      margin-bottom: 10px;\n    }\n    label {\n      display: block;\n      margin-bottom: 4px;\n      font-size: var(--dile-input-label-font-size, 1em);\n      color: var(--dile-input-label-color, #59e);\n    }\n    input {\n      box-sizing: border-box;\n      border-radius: 5px;\n      border: var(--dile-input-border-size, 1px) solid var(--dile-input-border-color, #888);\n      font-size: 1em;\n      padding: 5px;\n      width: 100%;\n    }\n    input:focus {\n      outline: none;\n      border-color: var(--dile-input-focus-border-color, #6af)\n    }\n    input::placeholder {\n      color: #ccc;\n    }\n    input:disabled {\n      background-color: #f5f5f5;\n      border-color: var(--dile-input-disabled-border-color, #eee);\n    }\n    `;\n  }\n  render() {\n    return html`\n    <div>\n      ${this.label\n        ? html`<label for=\"textField\">${this.label}:</label>`\n        : ''\n      }\n      <input \n        type=\"text\" \n        id=\"textField\" \n        name=\"${this.name}\"\n        placeholder=\"${this.placeholder}\" \n        ?disabled=\"${this.disabled}\" \n        @keypress=\"${this._lookForEnter}\"\n        @input=\"${this._input}\"\n        .value=\"${this.value}\">\n    </div>\n    `;\n  }\n  /**\n   * Private method to dispatch events on enter key pressed\n   *\n   * @return {!IronRequestElement}\n   */\n  _lookForEnter(e) {\n    let keycode = (e.keyCode ? e.keyCode : e.which);\n    if (keycode == '13') {\n        this.dispatchEvent(new CustomEvent('enter-pressed'));\n    }\n  }\n  _input(e) {\n    this.value = e.target.value;\n  }\n  \n}\ncustomElements.define('dile-input', DileInput);","import { LitElement, html } from 'lit-element';\nimport 'dile-input/dile-input'\n\nclass TodoAdd extends LitElement {\n  static get properties() {\n    return {\n      value: { type: String }\n    };\n  }\n\n  constructor() {\n    super();\n    this.value = '';\n  }\n\n  render() {\n    return html`\n      <dile-input\n        label=\"Nueva tarea\"\n        value=\"${this.value}\"\n        placeholder=\"Escribe la tarea y pulsa enter\"\n        @enter-pressed=\"${this.createTask}\"\n        @input=\"${(e) => this.value = e.target.value}\"\n      ></dile-input>\n    `;\n  }\n\n  createTask(e) {\n    this.dispatchEvent(new CustomEvent('task-added', {\n      detail: e.target.value\n    }));\n    this.value = '';\n  }\n}\ncustomElements.define('todo-add', TodoAdd);","import { LitElement, html, css } from 'lit-element';\nimport './components/todo-item';\nimport './components/todo-list';\nimport './components/todo-add';\n\nclass TodoApp extends LitElement {\n\tstatic get properties() {\n\t\treturn {\n\t\t\ttodos: { type: Array },\n\t\t};\n\t}\n\tconstructor() {\n\t\tsuper();\n\t\tthis.todos =  [\n      {\n        name: 'Tarea1',\n\t\t\t\tcompleted: false,\n\t\t\t\tid: 0\n      },\n      {\n        name: 'Zapatos al zapatero',\n\t\t\t\tcompleted: true,\n\t\t\t\tid: 1\n      },\n      {\n        name: 'Algo diferente',\n        completed: false,\n\t\t\t\tid: 2\n      },\n    ]  \n\t}\n\n\tstatic get styles() {\n\t\tconsole.log('estilos');\n\t\treturn css`\n\t\t:host {\n\t\t\tdisplay: block;\n\t\t\tpadding: 15px;\n\t\t}\n\t\t`;\n\t}\n\n\trender() {\n\t\treturn html`\n\t\t\t<h1>Todo app</h1>\n\n\t\t\t<todo-add \n\t\t\t\t@task-added=\"${this.createTask}\"\n\t\t\t></todo-add>\n\t\t\t<todo-list \n\t\t\t\tid=\"listado\" \n\t\t\t\t.tasks=\"${this.todos}\"\n\t\t\t\t@task-changed=\"${this.taskChanged}\"\n\t\t\t></todo-list>\n\t\t`;\n\t}\n\n\tcreateTask(e) {\n\t\t//console.log('createTask', e.detail);\n\t\t// this.todos.push({\n\t\t// \tname: e.detail,\n\t\t// \tcompleted: false\n\t\t// });\n\t\t// this.shadowRoot.getElementById('listado').requestUpdate();\n\t\tthis.todos = [\n\t\t\t...this.todos,\n\t\t\t{\n\t\t\t\tname: e.detail,\n\t\t\t\tcompleted: false,\n\t\t\t\tid: this.todos.length\n\t\t\t}\n\t\t]\n\t}\n\n\ttaskChanged(e) {\n\t\tconsole.log('taskChanged', e.detail);\n\t\tthis.todos = this.todos.map( item => {\n\t\t\tif(item.id == e.detail.task.id) {\n\t\t\t\treturn {\n\t\t\t\t\t...item,\n\t\t\t\t\tcompleted: e.detail.state\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn item;\n\t\t\t}\n\t\t});\n\t}\n\n}\n\ncustomElements.define('todo-app', TodoApp);\n"],"names":["directives","WeakMap","isDirective","o","has","isCEPolyfill","undefined","window","customElements","polyfillWrapFlushCallback","removeNodes","container","startNode","endNode","node","n","nextSibling","removeChild","noChange","nothing","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","Template","result","element","parts","index","partIndex","nodesToRemove","_prepareTemplate","template","content","walker","document","createTreeWalker","lastPartIndex","nextNode","currentNode","nodeType","hasAttributes","attributes","count","i","length","value","indexOf","stringForPart","strings","name","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","getAttribute","split","_this","push","type","removeAttribute","tagName","data","parent","parentNode","_strings","lastIndex","_i","insertBefore","createMarker","createTextNode","_parent","previousSibling","_i2","isTemplatePartActive","part","createComment","TemplateInstance","processor","options","_parts","values","this","setValue","_part","commit","fragment","cloneNode","importNode","nodeIndex","_prepareInstance","_part2","handleTextExpression","insertAfterNode","handleAttributeExpressions","nodeName","adoptNode","upgrade","TemplateResult","endIndex","html","s","match","substr","createElement","innerHTML","getHTML","isPrimitive","_typeof","AttributeCommitter","dirty","_createPart","AttributePart","l","text","v","Array","isArray","Symbol","iterator","t","setAttribute","_getValue","comitter","committer","directive","NodePart","_pendingValue","appendChild","ref","_insert","_commitText","_commitTemplateResult","Node","_commitNode","_commitIterable","clear","templateFactory","update","instance","_clone","itemPart","itemParts","item","appendIntoPart","insertAfterPart","BooleanAttributePart","Error","PropertyCommitter","single","PropertyPart","eventOptionsSupported","addEventListener","removeEventListener","_e","EventPart","eventName","eventContext","_boundHandleEvent","e","_this2","handleEvent","newListener","oldListener","shouldRemoveListener","capture","once","passive","shouldAddListener","_options","getOptions","event","call","defaultTemplateProcessor","prefix","templateCache","templateCaches","get","stringsArray","keyString","Map","set","key","join","getTemplateElement","walkerNodeFilter","removeNodesFromTemplate","nextActiveIndexInTemplateParts","removeCount","nodesToRemoveInTemplate","currentRemovingNode","forEach","countNodes","getTemplateCacheKey","scopeName","compatibleShadyCSSVersion","ShadyCSS","prepareTemplateDom","console","warn","shadyTemplateFactory","cacheKey","TEMPLATE_TYPES","shadyRenderSet","Set","prepareTemplateStyles","renderedDOM","add","styles","querySelectorAll","condensedStyle","style","textContent","templates","from","removeStylesFromLitTemplates","refNode","insertCount","walkerIndex","insertNodeIntoTemplate","firstChild","nativeShadow","_style","querySelector","removes","JSCompiler_renameProperty","prop","_obj","defaultConverter","toAttribute","Boolean","Object","JSON","stringify","fromAttribute","Number","parse","notEqual","old","defaultPropertyDeclaration","attribute","converter","reflect","hasChanged","microtaskPromise","Promise","resolve","UpdatingElement","_updateState","_instanceProperties","_updatePromise","_hasConnectedResolver","_changedProperties","_reflectingProperties","initialize","HTMLElement","_saveInstanceProperties","_requestUpdate","constructor","_classProperties","_v","p","hasOwnProperty","_this3","_attributeToProperty","ctor","attr","_attributeNameForProperty","attrValue","_propertyValueToAttribute","propName","_attributeToPropertyMap","_propertyValueFromAttribute","oldValue","shouldRequestUpdate","_valueHasChanged","_hasRequestedUpdate","_enqueueUpdate","updateComplete","previousUpdatePromise","res","rej","reject","_hasConnected","_this4","performUpdate","_applyInstanceProperties","shouldUpdate","changedProperties","_markUpdated","firstUpdated","updated","size","k","_this5","_propertyToAttribute","superProperties","getPrototypeOf","_this6","_ensureClassProperties","noAccessor","prototype","defineProperty","configurable","enumerable","finalized","superCtor","finalize","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","createProperty","_this7","supportsAdoptingStyleSheets","Document","CSSStyleSheet","constructionToken","CSSResult","cssText","safeToken","_styleSheet","replaceSync","css","reduce","acc","idx","textFromCSSResult","flattenStyles","flat","Infinity","arrayFlat","LitElement","renderRoot","createRenderRoot","ShadowRoot","adoptStyles","attachShadow","mode","_styles","adoptedStyleSheets","map","styleSheet","_needsShimAdoptedStyleSheets","ScopingShim","prepareAdoptedCssText","localName","hasUpdated","styleElement","templateResult","render","_getUniqueStyles","userStyles","reduceRight","unshift","hasRendered","needsScoping","firstScopeRender","renderContainer","createDocumentFragment","assign","appendInto","litRender","delete","host","EitSwitch","checked","doClick","checkedIcon","unCheckedIcon","dispatchEvent","CustomEvent","bubbles","composed","detail","define","TodoItem","task","completed","checkedChanged","state","TodoList","items","order","query","tasks","setFilterAsc","setFilterDesc","changeFilter","getItems","doOrder","doFilter","log","filter","target","sort","a","b","nameA","nameB","DileInput","placeholder","label","disabled","_lookForEnter","_input","keyCode","which","TodoAdd","createTask","TodoApp","todos","id","taskChanged"],"mappings":"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"}